model_name is simplekt, dataset_name is algebra2005
Read data from processed file: ../data/algebra2005\test_sequences.csv_-1.pkl
file path: ../data/algebra2005\test_sequences.csv, qlen: 732, clen: 732, rlen: 732
Read data from processed file: ../data/algebra2005\test_window_sequences.csv_-1.pkl
file path: ../data/algebra2005\test_window_sequences.csv, qlen: 114220, clen: 114220, rlen: 114220
Read data from processed file: ../data/algebra2005\test_question_sequences.csv_-1_qtest.pkl
file path: ../data/algebra2005\test_question_sequences.csv, qlen: 69953, clen: 69953, rlen: 69953
Read data from processed file: ../data/algebra2005\test_question_window_sequences.csv_-1_qtest.pkl
file path: ../data/algebra2005\test_question_window_sequences.csv, qlen: 125363, clen: 125363, rlen: 125363
has test_question_file!
Start predicting model: simplekt, embtype: qid, save_dir: saved_model/algebra2005_simplekt_qid_saved_model_42_0_0.1_256_256_2_4_0.5_0.5_0.5_50_256_256_4_2_0.0001_1_1_17fd1239-cd4e-4092-8490-a9f2f9154b9b, dataset_name: algebra2005
model_config: {'dropout': 0.1, 'final_fc_dim': 256, 'final_fc_dim2': 256, 'num_layers': 2, 'nheads': 4, 'loss1': 0.5, 'loss2': 0.5, 'loss3': 0.5, 'start': 50, 'd_model': 256, 'd_ff': 256, 'num_attn_heads': 4, 'n_blocks': 2}
data_config: {'dpath': '../data/algebra2005', 'num_q': 173113, 'num_c': 112, 'input_type': ['questions', 'concepts'], 'max_concepts': 7, 'min_seq_len': 3, 'maxlen': 200, 'emb_path': '', 'train_valid_original_file': 'train_valid.csv', 'train_valid_file': 'train_valid_sequences.csv', 'folds': [0, 1, 2, 3, 4], 'test_original_file': 'test.csv', 'test_file': 'test_sequences.csv', 'test_window_file': 'test_window_sequences.csv', 'test_question_file': 'test_question_sequences.csv', 'test_question_window_file': 'test_question_window_sequences.csv', 'train_valid_original_file_quelevel': 'train_valid_quelevel.csv', 'train_valid_file_quelevel': 'train_valid_sequences_quelevel.csv', 'test_file_quelevel': 'test_sequences_quelevel.csv', 'test_window_file_quelevel': 'test_window_sequences_quelevel.csv', 'test_original_file_quelevel': 'test_quelevel.csv', 'dataset_name': 'algebra2005'}
model_name: simplekt, emb_type: qid
testauc: 0.9249393595743509, testacc: 0.8715713500749959
testauc: 0.9249393595743509, testacc: 0.8715713500749959, window_testauc: 0.9243713939190547, window_testacc: 0.8712655402309045
E:\zjh\pykt-toolkit-main\pykt\models\evaluate_model.py:259: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at C:\cb\pytorch_1000000000000\work\torch\csrc\utils\tensor_new.cpp:248.)
  curhs = [torch.tensor(curh).float().to(device) for curh in curhs]
Traceback (most recent call last):
  File "E:\zjh\pykt-toolkit-main\examples\wandb_predict_temp.py", line 146, in <module>
    main(params)
  File "E:\zjh\pykt-toolkit-main\examples\wandb_predict_temp.py", line 107, in main
    q_testaucs, q_testaccs = evaluate_question(model, test_question_loader, model_name, fusion_type,
  File "E:\zjh\pykt-toolkit-main\pykt\models\evaluate_model.py", line 385, in evaluate_question
    for data in test_loader:
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\dataloader.py", line 633, in __next__
    data = self._next_data()
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\dataloader.py", line 677, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\fetch.py", line 54, in fetch
    return self.collate_fn(data)
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 142, in collate
    return [collate(samples, collate_fn_map=collate_fn_map) for samples in transposed]  # Backwards compatibility.
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 142, in <listcomp>
    return [collate(samples, collate_fn_map=collate_fn_map) for samples in transposed]  # Backwards compatibility.
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 127, in collate
    return elem_type({key: collate([d[key] for d in batch], collate_fn_map=collate_fn_map) for key in elem})
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 127, in <dictcomp>
    return elem_type({key: collate([d[key] for d in batch], collate_fn_map=collate_fn_map) for key in elem})
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 119, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "D:\anaconda\envs\pyKT\lib\site-packages\torch\utils\data\_utils\collate.py", line 162, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
KeyboardInterrupt